C# 입문 0-30

컬렉션은 필요에 따라 사이즈도 조절이 되고 서로 다른 데이터 타입을 관리할 때 좋은 자료구조 이다.

ArrayList는 자료형이 다른 변수들을 담을 수 있는 자료구조이고, Add(); 를 통해서 담고 Remove();를 이용해서 삭제를 한다. 인스턴스화 해서 사용을 할 수 있고 담은 순서대로 출력이 된다. Count를 이용해서 컬렉션의 사이즈를 알 수 있다(자바에서 size();)

스택은 ArrayList처럼 자료형이 다른 변수들을 담고, 인스턴스화 해서 사용하는 자료구조이다. 차이점은 Push();를 통해서 변수를 담는다는 것과 담은 순서의 반대로 꺼낸다는 점이다. (stack 구조가 들어간 순서대로 아래부터 쌓이는 구조이기 때문에 꺼낼 때도 위에 있는 것부터 차례대로 꺼내져서 나오기 떄문에 담은 순서의 역순으로 출력이 된다)

큐(Queue)는 인스턴스화 해서 사용할 때 생성자의 매개변수에 배열을 담아서 사용해야 한다. 배열을 담아서 사용하기 때문에 한가지 자료형만 담을 수 있다. 큐도 담은 순서대로 꺼낼 수 있다.

해쉬테이블은 키와값 쌍으로 되어있는 자료구조이고 여러 자료형을 담을 수 있다. Add();를 이용해서 담고, ht[키값]을 이용해서 밸류값을 출력 할 수 있다. ht.Keys를 이용해서 키값에 접근할 수 있고, ht.Values를 이용하여 밸류값에 접근할 수 있다. 넣은 순서를 보장해주지는 않는다.

딕셔너리도 해쉬테이블처럼 키,값 쌍으로 담는 자료구조이다. 차이점은 인스턴스화 할 때 키와 값의 자료형을 정해서 해당 자료형만 담을 수 있고, 담은 순서대로 출력할 수 있다.

솔티드 리스트도 여러 자료형을 담을 수 있는 자료구조 이고, Add();를 이용해서 담아준다. 솔티드리스트는 key값을 순서대로 정렬 한 뒤 정렬 순서대로 출력해준다. GetKey(i);를 사용하면 key값들을 확인할 수 있고, GetByIndex(i);로 정렬된 인덱스값을 확인할 수 있다.